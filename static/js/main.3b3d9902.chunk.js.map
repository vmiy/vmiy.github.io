{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","typye","App","characters","filter","character","i","toConsumableArray","concat","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b3d9902.chunk.js","sourcesContent":["import React , {Component} from \"react\"\r\nconst TableHeader=()=>{\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\nconst TableBody=props=>{\r\n    const rows=props.characterData.map((row,index)=>{\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td><button onClick={()=>props.removeCharacter(index)}>Delete</button> </td>\r\n            </tr>\r\n        );\r\n    });\r\n    return <tbody>{rows}</tbody>;\r\n}\r\nclass Table extends Component{\r\n    render(){\r\n        const {characterData,removeCharacter}=this.props;\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody \r\n                    characterData={characterData}\r\n                    removeCharacter={removeCharacter}\r\n                 />\r\n            </table>\r\n        );\r\n    }\r\n}\r\nexport default Table;","import React, {Component}from 'react';\r\nclass Form extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.initialState={\r\n            name:'',\r\n            job:\"\"\r\n        };\r\n        this.state=this.initialState;\r\n    }\r\n\r\n    handleChange=event=>{\r\n        const {name,value}=event.target;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n    submitForm=()=>{\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n    render(){\r\n        const {name,job}=this.state;\r\n        return (\r\n            <form>\r\n                <label>Name</label>\r\n                <input \r\n                    type='text'\r\n                    name='name'\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label>Job</label>\r\n                <input\r\n                    typye='text'\r\n                    name='job' \r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                <input\r\n                    type='button'\r\n                    value='Submit'\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n        \r\n    }\r\n\r\n}\r\nexport default Form;\r\n\r\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state={\n    characters:[\n      {\n        'name':'Charlie',\n        'job':'Janitor'\n      },\n      {\n        'name':'Mac',\n        'job':'Bouncer'\n      },\n      {\n        'name':'Dennis',\n        'job':'Bartender'\n      }\n    ]\n  };\n  removeCharacter=index=>{\n    const {characters}=this.state;\n    this.setState({\n      characters:characters.filter((character,i)=>{\n        return i !==index;\n      })\n    })\n  }\n  handleSubmit=character=>{\n    this.setState({characters:[...this.state.characters,character]});\n  }\n  render() {\n    const {characters}=this.state;\n    return (\n        <div className=\"container\">\n          <Table \n            characterData={characters} \n            removeCharacter={this.removeCharacter}\n          />\n          <Form handleSubmit={this.handleSubmit} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}